clc;
clear;

% strFunc = input('Enter your function: ', 's');
% func = str2func(strcat('@(x)', strFunc));

% Задаем функции
func = @(x) 1000/(x.^2 - 6 * x + 76);
dfunc = @(x) -(2000 * (x - 3))/(x.^2 - 6 * x + 76).^2;
d2func = @(x) (2000 * (3 * x.^2 - 18 * x - 40))/((x.^2 - 6 * x + 76).^3);

% Вводим количество точек для функции
num = 10;
points = linspace(0,2,num);

% Задаем точку, в которой будем высчитывать значение погрешности
pointNumber = 5;

% Задаем точки для последующих вычислений и построения графика
loop = num : 100;

% Создаем векторы для построения графиков

plot1 = zeros(size(loop) - 9);
plot2 = zeros(size(loop) - 9);
plot3 = zeros(size(loop) - 9);
plot4 = zeros(size(loop) - 9);
plot5 = zeros(size(loop) - 9);
plot6 = zeros(size(loop) - 9);

%  Высчитываем значения нашей функции и ее производных
for i = 1 : num
    values(i) = func(points(i));
    dValues(i) = dfunc(points(i));
    d2Values(i) = d2func(points(i));
end

% точка, которую мы выбрали для высчитывания погрешности
chosenPoint = points(pointNumber);

% Шумим значения нашей функции
for i = 1 : num
    noisedValues(i) = values(i) + rand - 0.5;
end



% Вычисляем производную функции по первой формуле
for i = 3 : (num - 3)
   d1(i) = (noisedValues(i + 1) - noisedValues(i))/(points(i + 1) - points(i));
end
delta1 = abs(dfunc(chosenPoint) - d1(pointNumber));
alpha1 = -log(delta1)/log(pointNumber);
plot1(1) = alpha1;

% Вычисляем производную функции по второй формуле
for i = 3 : (num - 3)
   d2(i) = (-3 * noisedValues(i) + 4 * noisedValues(i + 1) - noisedValues(i + 2))/(points(i + 1) - points(i - 1));
end
delta2 = abs(dfunc(chosenPoint) - d2(pointNumber));
alpha2 = -log(delta2)/log(pointNumber);
plot2(1) = alpha2;

% Вычисляем производную функции по третьей формуле
for i = 3 : (num - 3)
   d3(i) = (-11 * noisedValues(i) + 18 * noisedValues(i + 1) - 9 * noisedValues(i + 2) + 2 * noisedValues(i + 3))/(6 *(points(i + 1) - points(i)));
end
delta3 = abs(dfunc(chosenPoint) - d3(pointNumber));
alpha3 = -log(delta3)/log(pointNumber);
plot3(1) = alpha3;

% Вычисляем производную функции по четвертой формуле
for i = 3 : (num - 3)
   d4(i) = (-3 * noisedValues(i) + 4 * noisedValues(i + 1) - noisedValues(i + 2))/(2 * (points(i + 1) - points(i)));
end
delta4 = abs(dfunc(chosenPoint) - d4(pointNumber));
alpha4 = -log(delta4)/log(pointNumber);
plot4(1) = alpha4;

% Вычисляем производную функции по пятой формуле
for i = 3 : (num - 3)
%  !!!Здесь формула была немного изменена, так как в политеховском учебнике в
%  знаменателе стоит h^2, в то время как на паре был дан просто h!!!
   d5(i) = (noisedValues(i + 1) - 2* noisedValues(i) + noisedValues(i - 1))/((points(i + 1) - points(i)).^2);
end
delta5 = abs(d2func(chosenPoint) - d5(pointNumber));
alpha5 = -log(delta5)/log(pointNumber);
plot5(1) = alpha5;

% Вычисляем производную функции по шестой формуле
for i = 3 : (num - 3)
   d6(i) = (2 * noisedValues(i) - 5 * noisedValues(i + 1) + 4 * noisedValues(i + 2) -  noisedValues(i + 3))/((points(i + 1) - points(i)).^2);
end
delta6 = abs(d2func(chosenPoint) - d6(pointNumber));
alpha6 = -log(delta6)/log(pointNumber);
plot6(1) = alpha6;


% Начинаем в цикле смотреть на изменение погрешности при увеличении
% количества точек
for k = (num + 1):(size(loop) + num)
    
    newPoints = linspace(0,2,k);
%     Находим наиболее приближенную точку к той, которую мы брали
    [d, index] = min(abs(points - chosenPoint));
    newChosenPoint = newPoints(index);
    
    
    %  Высчитываем значения нашей функции и ее производных
    for i = 1 : k
        values(i) = func(newPoints(i));
        dValues(i) = dfunc(newPoints(i));
        d2Values(i) = d2func(newPoints(i));
    end

    % Шумим значения нашей функции
    for i = 1 : k
        noisedValues(i) = values(i) + rand - 0.5;
    end



    % Вычисляем производную функции по первой формуле
    for i = 3 : (k - 3)
       d1(i) = (noisedValues(i + 1) - noisedValues(i))/(newPoints(i + 1) - newPoints(i));
    end
    delta1 = abs(dfunc(newChosenPoint) - d1(index));
    alpha1 = -log(delta1)/log(index);
    plot1(k - 9) = alpha1;

    % Вычисляем производную функции по второй формуле
    for i = 3 : (k - 3)
       d2(i) = (-3 * noisedValues(i) + 4 * noisedValues(i + 1) - noisedValues(i + 2))/(newPoints(i + 1) - newPoints(i - 1));
    end
    delta2 = abs(dfunc(newChosenPoint) - d2(index));
    alpha2 = -log(delta2)/log(index);
    plot2(k - 9) = alpha2;

    % Вычисляем производную функции по третьей формуле
    for i = 3 : (k - 3)
       d3(i) = (-11 * noisedValues(i) + 18 * noisedValues(i + 1) - 9 * noisedValues(i + 2) + 2 * noisedValues(i + 3))/(6 *(newPoints(i + 1) - newPoints(i)));
    end
    delta3 = abs(dfunc(newChosenPoint) - d3(index));
    alpha3 = -log(delta3)/log(index);
    plot3(k - 9) = alpha3;

    % Вычисляем производную функции по четвертой формуле
    for i = 3 : (k - 3)
       d4(i) = (-3 * noisedValues(i) + 4 * noisedValues(i + 1) - noisedValues(i + 2))/(2 * (newPoints(i + 1) - newPoints(i)));
    end
    delta4 = abs(dfunc(newChosenPoint) - d4(index));
    alpha4 = -log(delta4)/log(index);
    plot4(k - 9) = alpha4;

    % Вычисляем производную функции по пятой формуле
    for i = 3 : (k - 3)
    %  !!!Здесь формула была немного изменена, так как в политеховском учебнике в
    %  знаменателе стоит h^2, в то время как на паре был дан просто h!!!
       d5(i) = (noisedValues(i + 1) - 2* noisedValues(i) + noisedValues(i - 1))/((newPoints(i + 1) - newPoints(i)).^2);
    end
    delta5 = abs(d2func(newChosenPoint) - d5(index));
    alpha5 = -log(delta5)/log(index);
    plot5(k - 9) = alpha5;

    % Вычисляем производную функции по шестой формуле
    for i = 3 : (k - 3)
       d6(i) = (2 * noisedValues(i) - 5 * noisedValues(i + 1) + 4 * noisedValues(i + 2) -  noisedValues(i + 3))/((newPoints(i + 1) - newPoints(i)).^2);
    end
    delta6 = abs(d2func(newChosenPoint) - d6(index));
    alpha6 = -log(delta6)/log(index);
    plot6(k - 9) = alpha6;
end

plot (loop, plot1, 'm');
hold on 
plot (loop, plot2, 'b');
plot (loop, plot3, 'c');
plot (loop, plot4, 'k');
plot (loop, plot5, 'g');
plot (loop, plot6, 'y');
legend('alpha 1 - m', 'alpha 2 - b', 'alpha 3 - c', 'alpha 4 - k', 'alpha 5 - g', 'alpha 6 - y');


% n = 10;
% points = linspace(0, 2, n);
% 
% loop = n : 100;
% 
% plot1 = zeros(size(loop) - 9);
% plot2 = zeros(size(loop) - 9);
% plot3 = zeros(size(loop) - 9);
% plot4 = zeros(size(loop) - 9);
% plot5 = zeros(size(loop) - 9);
% plot6 = zeros(size(loop) - 9);
% 
% for j = loop
%     
%     if (j == 10)
%         for i = 1 : j
%             values(i) = dfunc(points(i));
%         end
%         dfuncValues = values;
%         mPoint = points(4);
% 
%         for i = 3 : (j - 3)
% %             f12(i) = func(points(i - 2));
% %             f11(i) = func(points(i - 1));
% %             f0(i) = func(points(i));
% %             f1(i) = func(points(i + 1));
% %             f2(i) = func(points(i + 2));
% %             f3(i) = func(points(i + 3));
% 
%             % немного шумим функции
%             f12(i) = func(points(i - 2)) + (rand * 0.0001 - 0.00005);
%             f11(i) = func(points(i - 1)) + (rand * 0.0001 - 0.00005);
%             f0(i) = func(points(i)) + (rand * 0.0001 - 0.00005);
%             f1(i) = func(points(i + 1)) + (rand * 0.0001 - 0.00005);
%             f2(i) = func(points(i + 2)) + (rand * 0.0001 - 0.00005);
%             f3(i) = func(points(i + 3)) + (rand * 0.0001 - 0.00005);
%         end
%         
% % % % % % %       (1)
%         for i = 3 : (j - 3)
%             d1(i) = (f1(i) - f0(i))/(points(i + 1) - points(i));
%         end
%         delta1 = abs(dfunc(mPoint) - d1(5));
%         alpha1 = -log(delta1)/log(5);
%         plot1(j - 9) = alpha1;
%         
% % % % % % %       (2)  
%         for i = 3 : (j - 3)
%             d2(i) = (f1(i) - f11(i))/(points(i + 1) - points(i - 1));
%         end 
%         delta2 = abs(dfunc(mPoint) - d2(5));
%         alpha2 = -log(delta2)/log(5);
%         plot2(j - 9) = alpha2;
%         
% % % % % % %       (3)  
%         for i = 3 : (j - 3)
%             d3(i) = (- 3 * f0(i) + 4 * f1(i) - f2(i))/(points(i + 2) - points(i));
%         end 
%         delta3 = abs(dfunc(mPoint) - d3(5));
%         alpha3 = -log(delta3)/log(5);
%         plot3(j - 9) = alpha3;
%         
% % % % % % %       (4)  
%         for i = 3 : (j - 3)
%             d4(i) = (- 11 * f0(i) + 18 * f1(i) - 9 * f2(i) + 2 * f3(i))/(3 * (points(i + 2) - points(i)));
%         end 
%         delta4 = abs(dfunc(mPoint) - d4(5));
%         alpha4 = -log(delta4)/log(5);
%         plot4(j - 9) = alpha4;        
%         
% % % % % % %       (5)  
%         for i = 3 : (j - 3)
%             d5(i) = (f1(i) - 2 * f0(i) + f11(i))/((points(i + 1) - points(i)).^2);
%         end 
%         delta5 = abs(d2func(mPoint) - d5(5));
%         alpha5 = -log(delta5)/log(5);
%         plot5(j - 9) = alpha5;
%         
% % % % % % %       (6)  
%         for i = 3 : (j - 3)
%             d6(i) = (- f12(i) + 16 * f11(i) - 30 * f0(i) + 16 * f1(i) - f2(i))/(12 * (points(i + 1) - points(i)).^2);
%         end 
%         delta6 = abs(d2func(mPoint) - d6(5));
%         alpha6 = -log(delta6)/log(5);
%         plot6(j - 9) = alpha6;          
%     else
% 
%         points = linspace(0, 2, j);
%         [d, index] = min(abs(points - mPoint));
%         
%         mPoint12 = points(index - 2);
%         mPoint11 = points(index - 1);
%         mPoint0 = points(index);
%         mPoint1 = points(index + 1);
%         mPoint2 = points(index + 2);
%         mPoint3 = points(index + 3);
%         
%         f12 = func(mPoint12) + (rand * 0.0001 - 0.00005);
%         f11 = func(mPoint11) + (rand * 0.0001 - 0.00005);
%         f0 = func(mPoint0) + (rand * 0.0001 - 0.00005);
%         f1 = func(mPoint1) + (rand * 0.0001 - 0.00005);
%         f2 = func(mPoint2) + (rand * 0.0001 - 0.00005);
%         f3 = func(mPoint3) + (rand * 0.0001 - 0.00005);
%         
% %         f12 = func(mPoint12);
% %         f11 = func(mPoint11);
% %         f0 = func(mPoint0);
% %         f1 = func(mPoint1);
% %         f2 = func(mPoint2);
% %         f3 = func(mPoint3);
% 
% % % % % % % % % %  (1) 
%         d1 = (f1 - f0)/(mPoint1 - mPoint0);
%         delta1 = abs(dfunc(mPoint0) - d1);
%         alpha1 = -log(delta1)/log(index);
%         plot1(j - 9) = alpha1;
%         
% % % % % % % % % %  (2)        
%         d2 = (f1 - f11)/(mPoint1 - mPoint11);
%         delta2 = abs(dfunc(mPoint0) - d2);
%         alpha2 = -log(delta2)/log(index);
%         plot2(j - 9) = alpha2;
%         
% % % % % % % % % %  (3)        
%         d3 = (-3 * f0 + 4 * f1 - f2)/(mPoint2 - mPoint0);
%         delta3 = abs(dfunc(mPoint0) - d2);
%         alpha3 = -log(delta3)/log(index);
%         plot3(j - 9) = alpha3;
%         
% % % % % % % % % %  (4)        
%         d4 = (-11 * f0 + 18 * f1 - 9 * f2 + 2 * f3)/(3 * (mPoint2 - mPoint0));
%         delta4 = abs(dfunc(mPoint0) - d4);
%         alpha4 = -log(delta4)/log(index);
%         plot4(j - 9) = alpha4; 
%         
% % % % % % % % % %  (5)        
%         d5 = (f1 - 2 * f0 + f11)/((mPoint1 - mPoint0).^2);
%         delta5 = abs(d2func(mPoint0) - d5);
%         alpha5 = -log(delta5)/log(index);
%         plot5(j - 9) = alpha5;
%         
% % % % % % % % % %  (6)        
%         d6 = (- f12 + 16 * f11 - 30 * f0 + 16 * f1 - f2)/(12 * (mPoint1 - mPoint0).^2);
%         delta6 = abs(d2func(mPoint0) - d6);
%         alpha6 = -log(delta6)/log(index);
%         plot6(j - 9) = alpha6;          
%     end
% 
% end
% 
% plot (loop, plot1, 'm');
% hold on 
% plot (loop, plot2, 'b');
% plot (loop, plot3, 'c');
% plot (loop, plot4, 'k');
% plot (loop, plot5, 'g');
% plot (loop, plot6, 'y');
% legend('alpha 1 - m', 'alpha 2 - b', 'alpha 3 - c', 'alpha 4 - k', 'alpha 5 - g', 'alpha 6 - y');
